import heapq

def network_signal_time(times, n, k):
    graph = {}
    for u, v, w in times:
        if u not in graph:
            graph[u] = []
        graph[u].append((v, w))

    pq = [(0, k)]
    dist = {}
    
    while pq:
        time, node = heapq.heappop(pq)
        if node in dist:
            continue
        dist[node] = time
        if node in graph:
            for nei, nei_time in graph[node]:
                if nei not in dist:
                    heapq.heappush(pq, (time + nei_time, nei))

    return max(dist.values()) if len(dist) == n else -1

# Example usage
times = [[2, 1, 1], [2, 3, 1], [3, 4, 1]]
n = 4
k = 2
print(network_signal_time(times, n, k))  # Output: 2
