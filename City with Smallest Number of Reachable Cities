from collections import defaultdict
import heapq

def findTheCity(n, edges, distanceThreshold):
    graph = defaultdict(dict)
    for u, v, w in edges:
        graph[u][v] = graph[v][u] = w

    def dijkstra(src):
        pq = [(0, src)]
        dist = {src: 0}
        while pq:
            d, node = heapq.heappop(pq)
            if node in dist and dist[node] < d:
                continue
            for nei, w in graph[node].items():
                if d + w < dist.get(nei, float('inf')):
                    dist[nei] = d + w
                    heapq.heappush(pq, (d + w, nei))
        return sum(1 for d in dist.values() if d <= distanceThreshold) - 1

    min_city = -1
    min_reachable = float('inf')
    for city in range(n):
        reachable = dijkstra(city)
        if reachable <= min_reachable:
            min_city = city
            min_reachable = reachable

    return min_city

# Example 1
n = 4
edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]]
distanceThreshold = 4
print(findTheCity(n, edges, distanceThreshold))  # Output: 3

# Example 2
n = 5
edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]]
distanceThreshold = 2
print(findTheCity(n, edges, distanceThreshold))  # Output: 0
