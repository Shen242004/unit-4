# Define the network graph with distances between routers
INF = 99999
graph = [
    [0, 3, 8, INF, -4],
    [INF, 0, INF, 1, 7],
    [INF, 4, 0, INF, INF],
    [2, INF, -5, 0, INF],
    [INF, INF, INF, 6, 0]
]

# Function to implement Floyd's Algorithm for shortest paths
def floyd_algorithm(graph):
    n = len(graph)
    dist = graph

    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][k] + dist[k][j] < dist[i][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]

    return dist

# Function to simulate link failure and update distance matrix
def simulate_link_failure(graph, node1, node2):
    graph[node1][node2] = INF
    graph[node2][node1] = INF

# Function to find the shortest path from source to destination
def shortest_path(graph, source, destination):
    return graph[source][destination]

# Execute Floyd's Algorithm
distance_matrix = floyd_algorithm(graph)

# Simulate link failure between Router B and Router D
simulate_link_failure(graph, 1, 3)

# Display the shortest path from Router A to Router F before and after link failure
shortest_path_before_failure = shortest_path(distance_matrix, 0, 4)
shortest_path_after_failure = shortest_path(floyd_algorithm(graph), 0, 4)

print(f"Router A to Router F before link failure: {shortest_path_before_failure}")
print(f"Router A to Router F after link failure: {shortest_path_after_failure}")
